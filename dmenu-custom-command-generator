#!/bin/bash

# WHAT THIS DOES: this script will generate a custom dmenu that will display user defined options and upon selection will run some command.
# it is great for categorizing commonly used commands. Example, I use this for poweroff,reboot,lock,suspend.
#./this-script "power" "choose power option" "poweroff" "systemctl poweroff" "reboot" "systemctl reboot" "lock" "light-locker-command -l" "suspend" "systemctl suspend"

# USAGE NOTES
# ON THE FIRST PARAMETER $1:
# first parameter $1 is always the name of the file which dmenu will display, this script will generate an symlink with 
# the filename prefixed by "dmenu-" ex. if we use file name "some-command" the symlink will be named "dmenu-some-command"
# the symlink is placed in /usr/local/bin
# ON THE SECOND PARAMETER $2:
# the second parameter is the string in which dmenu will prompt when asking for the selection
# ALL OTHERS:
# parameters (greater than 2) are ALWAYS entered as a pair where the first parameter is the label to be selected in dmenu
# the next consecutive parameter is ALWAYS the command that will be run for that respective label
# example $1="file-manager", $2="file-manager-command", $3="some option in dmenu", $4="command-for-option"
# this implies (for parameters greater than 2) all odd numbered parameters are the dmenu selection label and all even numbered parameters are the respective commands

# PS. I realize this is messy, and not optimal, im not a pro in bash and just wanted write something quick and simple. I probably wont refactor because I'd rather
# be doing something else. If you want to refactor and  make it more elegant as opposed to the functional slop, go for it, let me know I can update this too.
# I apologize in advance for the inconsistent use of printf and echo. it just works this way so meh.


# generates dmenu selection 
counter=1
dmenu_selection=""
OUTPUT="/home/$(whoami)/.config/dmenu/custom-dmenu/"
for parameter in "$@"
do
parameter=$(echo "$parameter")
if [ $counter -eq 1 ]; then  # initial file setup once the loop reads the file name param
	FILENAME=$parameter
	OUTPUT+=$parameter
	touch $OUTPUT
	echo -e "$OUTPUT"
	printf %s "#!/bin/bash" >> $OUTPUT
	echo -e "\n\n# command auto generated by custome-dmenu-generator.sh\n\n" >> $OUTPUT
	echo -e "get_selection () {" >> $OUTPUT
	printf %s "echo -e \"" >> $OUTPUT
elif [ $counter -eq 2 ]; then # save the second parameter whcih is the dmenu prompt to be used later
	dmenu_prompt=$parameter
elif [ $(($# - 1)) -eq $counter ]; then #if last option do not append with \n"
	printf "$parameter" >> $OUTPUT
elif [ $(( $counter % 2 )) -ne 0 ]; then # write option and append with \n"
	echo "im the dmenu label $parameter at $counter"
	printf "$parameter" >> $OUTPUT
	printf %s "\n" >> $OUTPUT
fi
counter=$((counter+1));
done

echo -e "\" | dmenu -p \"$dmenu_prompt\"\n}" >> $OUTPUT # complete dmenu options prompt

# generate conditional command selection
counter=1
echo -e "\n\nselection=\$(get_selection)" >> $OUTPUT

for parameter in "$@"
do
parameter=$(echo "$parameter")
if [ $counter -gt 2 ];then
	if [ $counter -eq 3 ]; then
		echo -e "if [ \"\$selection\" == \"$parameter\" ]; then" >> $OUTPUT
	elif [ $(( $counter % 2 )) -ne 0 ]; then
		echo -e "elif [ \"\$selection\" == \"$parameter\" ]; then" >> $OUTPUT
	else
		echo -e "	$parameter" >> $OUTPUT
	fi
fi
counter=$((counter+1));
done
echo "fi" >> $OUTPUT

#get_selection_function=$(printf %s "echo -e \"$dmenu_selection\" | dmenu -p \"$dmenu_prompt\"\\n}")
#printf "$get_selection_function" >> $OUTPUT
chmod +x $OUTPUT
sym_link
ln -s $OUTPUT /usr/local/bin/dmenu-$FILENAME
echo -e "the file $OUTPUT has been created its contents are:"
cat $OUTPUT
